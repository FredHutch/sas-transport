///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025 Fred Hutch Cancer Center
// Licensed under the MIT License - see LICENSE file for details
///////////////////////////////////////////////////////////////////////////////
package org.scharp.scalability;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.scharp.sas_transport.Format;
import org.scharp.sas_transport.Justification;
import org.scharp.sas_transport.SasDataSetDescription;
import org.scharp.sas_transport.SasLibraryDescription;
import org.scharp.sas_transport.SasTransportExporter;
import org.scharp.sas_transport.SasTransportImporter;
import org.scharp.sas_transport.Variable;
import org.scharp.sas_transport.VariableType;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * This class contains code for reading and write a 5 GB XPORT file, which is the maximum size which the FDA Study Data
 * Technical Conformance Guide says that the FDA will accept.
 * <p>
 * The test is disabled because writing and reading a 5 GB file takes too long for a typical JUnit test run.
 * </p>
 */
@Disabled("takes too long to run in a typical JUnit cycle")
public class ScalabilityTest {

    private static final long TARGET_FILE_SIZE = 5L * 1000 * 1000 * 1000; // FDA accepts submissions up to 5 GB

    private void exportLargeTransportFile(Path path) throws IOException {

        // Create a 15 variable set with a mix of types.
        List<Variable> variables = Arrays.asList( //
            new Variable("VAR01", 1, VariableType.CHARACTER, 20, "", new Format("$UPCASE", 18), Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR02", 1, VariableType.CHARACTER, 200, "", new Format("$UPCASE", 18), Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR03", 1, VariableType.NUMERIC, 8, "", new Format("", 4, 2), Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR04", 1, VariableType.NUMERIC, 8, "", new Format("DATETIME", 21, 0), Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR05", 1, VariableType.NUMERIC, 8, "", new Format("DATE", 11, 0), Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR06", 1, VariableType.NUMERIC, 8, "", new Format("TIME", 20, 2), Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR07", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR08", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR09", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR10", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR11", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR12", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR13", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR14", 1, VariableType.NUMERIC, 8, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED), //
            new Variable("VAR15", 1, VariableType.CHARACTER, 1, "", Format.UNSPECIFIED, Justification.LEFT,
                Format.UNSPECIFIED));

        SasDataSetDescription dataSet = new SasDataSetDescription(//
            "BIGDATA", // name
            "Generated by exportLargeTransportFile()", // label
            "", // type
            "Java", // OS version
            "5.0", // SAS Version
            variables, // variables
            LocalDateTime.now(), // create
            LocalDateTime.now()); // modified

        // figure out about how many observations we need to fill the target size.
        int observationSize = 0;
        for (Variable variable : variables) {
            observationSize += variable.length();
        }
        long neededObservations = (TARGET_FILE_SIZE / observationSize) + 1;

        // Write the same observation each time to avoid adding extra cost in generating one.
        // The intent is to measure the performance of the library, not the test code.
        List<Object> observation = Arrays.asList(//
            "variable1", // VAR01
            "This is a long value that was generated by ScalabilityTest. " + //
                "It fills a space that is 200 bytes." + //
                "XPORT will pad it to fill exactly 200 bytes.", // VAR02
            34.4, // VAR03
            1002, // VAR04
            new java.sql.Timestamp(System.currentTimeMillis()), // VAR05
            new java.sql.Date(System.currentTimeMillis()), // VAR06
            new java.sql.Time(System.currentTimeMillis()), // VAR07
            252.02, // VAR08
            200052.02, // VAR09
            634.4, // VAR10
            14002, // VAR11
            2032352.02, // VAR12
            34.45432, // VAR13
            102, // VAR15
            "Y"); // VAR15
        try (SasTransportExporter exporter = dataSet.newLibraryDescription().exportTransportDataSet(path)) {
            for (int i = 0; i < neededObservations; i++) {
                exporter.appendObservation(observation);
            }
        }
    }

    private void importLargeTransportFile(Path path) throws IOException {

        try (SasTransportImporter importer = SasLibraryDescription.importTransportDataSet(path)) {

            // Get the variables
            importer.sasLibraryDescription().dataSetDescription().variables();

            // Read all observations
            List<Object> observation;
            while ((observation = importer.nextObservation()) != null) {
                // read each of the values
                for (int i = 0; i < observation.size(); i++) {
                    observation.get(i);
                }
            }
        }
    }

    public double nanoTimeToSeconds(long nanoseconds) {
        return nanoseconds / (1000.0 * 1000.0 * 1000.0);
    }

    @Test
    public void runScalabilityTest() throws IOException {

        Path targetLocation = Files.createTempFile("sas-transport-test-", ".xpt");

        try {
            // Write a data set.
            long beforeTime = System.nanoTime();
            exportLargeTransportFile(targetLocation);
            long exportTime = System.nanoTime() - beforeTime;

            System.out.printf(//
                "Took %3.2f seconds to export a %d byte file\n", //
                nanoTimeToSeconds(exportTime), //
                TARGET_FILE_SIZE); //

            // Confirm that the file is 5 GB.
            long actualSize = targetLocation.toFile().length();
            assertTrue(TARGET_FILE_SIZE <= actualSize, "TEST BUG: file was only " + actualSize + " bytes");

            // Read the data set.
            beforeTime = System.nanoTime();
            importLargeTransportFile(targetLocation);
            long importTime = System.nanoTime() - beforeTime;

            System.out.printf(//
                "Took %3.2f seconds to import a %d byte file\n", //
                nanoTimeToSeconds(importTime), //
                TARGET_FILE_SIZE); //

        } finally {
            // Always clean up
            Files.deleteIfExists(targetLocation);
        }
    }
}